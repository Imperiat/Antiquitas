@portraittopspacer = 304
@portraittopspacerbig = 400

template event_portrait
{
	flowcontainer = {
		direction = vertical

		spacing = 4

		cpt_button = {

			size = { 70 105 }

			country_flag = {
				position = { 1 2 }
				tooltip = "[Character.GetEmployer.GetDescriptiveName]"
				parentanchor = top|right
				visible = "[Not( EqualTo_int32( Character.GetEmployer.GetId, Player.GetId ) )]"

				datacontext = "[Character.GetEmployer]"

				blockoverride "flag"
				{
					texture = "[Character.GetEmployer.AccessCoatOfArms.GetTexture('(int32)120','(int32)120')]"
					frame = "[Character.GetEmployer.AccessCoatOfArms.GetFrame('(int32)120','(int32)120')]"
					framesize = { 120 120 }
				}

				blockoverride "size"
				{
					size = { 32 32 }
				}

				blockoverride "click"
				{
					onclick = "[OpenDiplomacy(Character.GetEmployer)]"
				}
			}
		}

		container = {
			tag = {
				name = "header"
				#size = { 120 32 }
				tooltip = "[Character.GetFamilyMemberText]"
				text = "[Character.GetPraenomen]"
				max_width = 70
				minimumsize = { 70 0 }
			}
		}
	}
}

template eventbuttonbig
{
	# For Standard Event Options
	text_button_square = {
		size = { 550 40 } 
		visible = "[Not(EventOption.IsHighlighted)]"
		blockoverride "On_click"
		{
			onclick = "[EventOption.Select]"
		}
		blockoverride "ClickSound"
		{
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
			oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		}
		blockoverride "Center_text" { 
			text = "[EventOption.GetText]" 
			elide = right
			fontsize = 18
			max_width = 500
		}
		using = tooltip_ws
		tooltip = "[EventOption.GetTooltip]"
	}
	
	# For Highlighted Event Options
	
	text_button_square_highlighted = {
		size = { 550 40 }
		visible = "[EventOption.IsHighlighted]"
		blockoverride "On_click"
		{
			onclick = "[EventOption.Select]"
		}
		blockoverride "Highlight" { alpha = 0.4 }
		blockoverride "ClickSound"
		{
			clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_close"
			oversound = "event:/SFX/UI/Generic/sfx_ui_generic_mouse_over"
		}
		blockoverride "Center_text" { 
			text = "[EventOption.GetText]" 
			elide = right
			fontsize = 18
			max_width = 500
		}
		tooltip = "[EventOption.GetTooltip]"
	}
	
	
	
	fixedgridbox = {
		name = "effects_grid"
		position = { -25 -2 }
		size = { 33 200 }
		addcolumn = 33
		addrow = 33
		maxhorizontalslots = 10
		maxverticalslots = 10
		datamodel = "[EventOption.Effects]"
		flipdirection = yes
		parentanchor = top|right
		widgetanchor = top|right

		item = {
			container = {
				container = {
					alwaystransparent = yes
					visible = "[OptionEffectItem.IsTrait]"
					icon = {
						size = { 32 32 }
						texture = "[OptionEffectItem.GetTraitItem.GetIcon]"
						tooltip = "[OptionEffectItem.GetTraitItem.GetTooltip]"
					}
					icon = {
						visible = "[OptionEffectItem.IsGain]"
						using = icon_plus
						position = { -12 16 }
					}
					icon = {
						visible = "[OptionEffectItem.IsLoss]"
						using = icon_minus
						position = { -12 16  }
					}
				}
				
				icon = {
					name = "death"
					visible = [OptionEffectItem.IsDeath]
					size = { 32 32 }
					using = icon_attrition
				}
			}
		}
	}
}


base_window = {
	name = "event_window"
	parentanchor = center
	position = { 0 38 }
	minimumsize = { 694 540 } #Width with top image should always be 756, otherwse this
	blockoverride "Drop_shadow" { visible = yes }
	blockoverride "DropShadowAlpha" { alpha = 0.3 }
	blockoverride "WindowAlpha" { alpha = 1 }

	state = {
		name = _show
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_snapshot_windows"
		}
	}

	icon = {
		visible = "[Or( EventWindow.HasRightPortraitCharacter('0'), EventWindow.HasLeftPortraitCharacter('0') )]"
		size = { 756 137 }
		texture = "gfx/interface/ornamental/event_top_white.dds"
		widgetanchor = bottom
		position = { 0 10 }
	}

	vbox = {
		using = MainWindowHeaderBoxCentered

		blockoverride "Title_text" { text = "[EventWindow.GetTitle]" }

		vbox = {
			layoutpolicy_vertical = expanding
		}

	}

	icon = {
		visible = "[Or( EventWindow.HasRightPortraitCharacter('0'), EventWindow.HasLeftPortraitCharacter('0') )]"
		size = { 756 137 }
		texture = "gfx/interface/ornamental/event_top_red.dds"
		widgetanchor = bottom
		position = { 0 10 }
	}

	icon = {
		#size = { 373 68 }
		position = { -1 -2 }
		texture = "gfx/interface/ornamental/event_bot_white.dds"
		widgetanchor = top|hcenter
		parentanchor = bottom|hcenter
		scale = 0.75
		alpha = 0.4
		color = { 0 0 0 1 }
	}

	icon = {
		#size = { 373 68 }
		position = { 0 -6 }
		texture = "gfx/interface/ornamental/event_bot_white.dds"
		widgetanchor = top|hcenter
		parentanchor = bottom|hcenter
		scale = 0.75
	}

	icon = {
		position = { 6 -54 }
		texture = "gfx/interface/ornamental/event_bot_red.dds"
		widgetanchor = hcenter
		parentanchor = bottom|hcenter
		scale = 0.75
	}

	container = {
		resizeparent = yes

		flowcontainer = {
			name = "portraits_left"
			visible = "[EventWindow.HasLeftPortraitCharacter('0')]"
			ignoreinvisible = yes
			direction = vertical
			spacing = 4
			position = { 19 @portraittopspacer }
			container = {
				using = event_portrait
				name = "portrait_left"
				parentanchor = hcenter
				datacontext = "[EventWindow.GetLeftPortraitCharacter('0')]"
				visible = "[EventWindow.HasLeftPortraitCharacter('0')]"
			}
			container = {
				using = event_portrait
				name = "portrait_left_small_1"
				parentanchor = hcenter
				datacontext = "[EventWindow.GetLeftPortraitCharacter('1')]"
				visible = "[EventWindow.HasLeftPortraitCharacter('1')]"
			}
			container = {
				using = event_portrait
				name = "portrait_left_small_2"
				parentanchor = hcenter
				datacontext = "[EventWindow.GetLeftPortraitCharacter('2')]"
				visible = "[EventWindow.HasLeftPortraitCharacter('2')]"
			}
			widget = { size = { 1 24 } visible = "[EventWindow.HasLeftPortraitCharacter('2')]" }
		}

		flowcontainer = {
			name = "portraits_right"

			visible = "[EventWindow.HasRightPortraitCharacter('0')]"
			ignoreinvisible = yes
			direction = vertical
			spacing = 4
			parentanchor = right
			position = { -19 @portraittopspacer }
			container = {
				using = event_portrait
				name = "portrait_right"
				parentanchor = hcenter
				datacontext = "[EventWindow.GetRightPortraitCharacter('0')]"
				visible = "[EventWindow.HasRightPortraitCharacter('0')]"
				blockoverride "portrait_transformation"
				{
					portrait_scale = { -1 1 }
					portrait_offset = { 1 0 }
				}
			}

			container = {
				using = event_portrait
				name = "portrait_right_small_1"
				parentanchor = hcenter
				datacontext = "[EventWindow.GetRightPortraitCharacter('1')]"
				visible = "[EventWindow.HasRightPortraitCharacter('1')]"
				blockoverride "portrait_transformation"
				{
					portrait_scale = { -1 1 }
					portrait_offset = { 1 0 }
				}
			}

			container = {
				using = event_portrait
				name = "portrait_right_small_2"
				parentanchor = hcenter
				datacontext = "[EventWindow.GetRightPortraitCharacter('2')]"
				visible = "[EventWindow.HasRightPortraitCharacter('2')]"
				blockoverride "portrait_transformation"
				{
					portrait_scale = { -1 1 }
					portrait_offset = { 1 0 }
				}
			}
			widget = { size = { 1 24 } visible = "[EventWindow.HasLeftPortraitCharacter('2')]" }
		}

		flowcontainer = {
			name = "Bottom"
			direction = horizontal
			position = { 0 0 }
			ignoreinvisible = yes

			margin_widget = {
				size = { 44 280 }
				icon = {
					texture = "gfx/interface/base_parts/background_red.dds"
					position = { 12 42 }
					size = { 40 260 }

					modify_texture = {
						name = "Alpha"
						texture = "gfx/interface/base_parts/header_l_pattern_x0bd_vertical.dds"
						blend_mode = alphamultiply
						spriteType = Corneredtiled
					}

					modify_texture = {
						name = "Alpha2"
						texture = "gfx/interface/base_parts/side_s_x104bd_left_cut_alpha.dds"
						blend_mode = alphamultiply
						spritetype = corneredTiled
						spriteborder = { 60 40 }
					}

				}
			}

			flowcontainer = {
				direction = vertical
				ignoreinvisible = yes
				flowcontainer = {
					name = "Center_Box_Smaller"
					direction = vertical
					margin = { 4 0 }
					ignoreinvisible = yes
					visible = "[Not( Or( EventWindow.HasRightPortraitCharacter('0'), EventWindow.HasLeftPortraitCharacter('0') ) )]"

					widget = { size = { 0 62 } }

					widget = {
						visible = "[Or( EventWindow.HasRightPortraitCharacter('0'), EventWindow.HasLeftPortraitCharacter('0') )]"
						name = "spacing_w"
						size = { 660 0 }
					}

					margin_widget = {
						size = { 600 249 }
						parentanchor = hcenter
						icon = {
							name = "event_picture"
							size = { 600 239 }
							texture = "[EventWindow.GetEventPicture]"
							tooltip = "[EventWindow.GetDebugInfo]"
							alpha = 0.8
						}
						icon = {
							name = "event_theme_icon"
							size = { 600 239 }
							texture = "[EventWindow.GetThemeIcon]"
							tooltip = "[EventWindow.GetDebugInfo]"
							modify_texture = {
								texture = "gfx/interface/base_parts/event_picture_alpha_big.dds"
								blend_mode = alphamultiply
							}
							alpha = 0.8
						}
					}

					scrollarea = {
						parentanchor = hcenter
						name = "description_scrollarea"
						maximumsize = { -1 340 }
						scrollbarpolicy_horizontal = always_off

						using = NoninteractableBG
						blockoverride "Margins" {
							margin = { 4 7 }
							margin_bottom = 10
						}
						scrollbar_vertical = {
							using = VerticalScrollBar
						}

						scrollwidget = {
							textbox = {
								name = "description"
								resizeparent = yes
								minimumsize = { 560 0 }
								maximumsize = { 560 -1 }
								multiline = yes
								using = BaseFontM
								using = Black_FontColor
								autoresize = yes
								margin = { 12 0 }
								align = top|left
								text = "[EventWindow.GetDescription]"
							}
						}
					}

					widget = {
						name = "spacer_2"
						size = { 0 20 }
					}
				}

				flowcontainer = {
					name = "Center_Box_big"
					direction = vertical
					margin = { 4 0 }
					ignoreinvisible = yes
					minimumsize = { 0 0 }
					visible = "[Or( EventWindow.HasRightPortraitCharacter('0'), EventWindow.HasLeftPortraitCharacter('0') )]"

					widget = { size = { 0 54 } }

					widget = {
						visible = "[Or( EventWindow.HasRightPortraitCharacter('0'), EventWindow.HasLeftPortraitCharacter('0') )]"
						name = "spacing_w_big"
						size = { 660 0 }
					}

					margin_widget = {
						size = { 600 242 }
						parentanchor = hcenter
						icon = {
							name = "event_picture_big"
							size = { 600 239 }
							texture = "[EventWindow.GetEventPicture]"
							tooltip = "[EventWindow.GetDebugInfo]"
							alpha = 0.8
						}
						icon = {
							name = "event_theme_icon"
							size = { 600 239 }
							texture = "[EventWindow.GetThemeIcon]"
							tooltip = "[EventWindow.GetDebugInfo]"
							modify_texture = {
								texture = "gfx/interface/base_parts/event_picture_alpha_big.dds"
								blend_mode = alphamultiply
							}
							alpha = 0.8
						}
					}
					widget = { size = { 0 10 } }
					scrollarea = {
						parentanchor = hcenter
						name = "description_scrollarea_big"
						maximumsize = { -1 340 }
						scrollbarpolicy_horizontal = always_off

						using = NoninteractableBG
						blockoverride "Margins" {
							margin = { 2 7 }
							margin_bottom = 10
						}
						scrollbar_vertical = {
							using = VerticalScrollBar
						}

						scrollwidget = {
							textbox = {
								name = "description_big"
								resizeparent = yes
								minimumsize = { 560 0 }
								maximumsize = { 560 -1 }
								multiline = yes
								using = BaseFontM
								using = Black_FontColor
								autoresize = yes
								margin = { 12 3 }
								align = top|left
								text = "[EventWindow.GetDescription]"
							}
						}
					}
				}
				widget = {
					size = { 0 34 }

					state = {
						name = show_hotkey_marker
						trigger_when = "[Player.Exists]"

						on_start = "[PdxGuiWidget.AccessParent.FindChild('hotkey_marker').Show]"
					}
				}
				fixedgridbox = {
					parentanchor = hcenter
					name = "option_grid"
					addcolumn = 550
					addrow = 38
					minimumsize = { 0 0 }
					item = {
						container = {
							using = eventbutton

							state = {
								name = first_button
								on_start = "[EventOption.Select]"
							}

							# state = {
							# 	name = trigger_hotkey_marker
							# 	#datacontext = "[GetScriptedGui('confirm_hotkey_minor')]"
							# 	#trigger_when = "[ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).End )]"
							#
							# 	on_start = "[PdxGuiTriggerAllAnimations('show_hotkey_marker')]"
							# }

							button = {
								name = "hotkey_marker"
								position = { 16 0 }
								size = { 30 30 }
								visible = no
								tooltip = "enter_hotkey"

								gfxtype = togglepushbuttongfx
								shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
								framesize = { 40 40 }
								datacontext = "[GetScriptedGui('confirm_hotkey')]"
								down = "[ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).End )]"

								button = { # this actually triggers the button
									size = { 0 0 }
									shortcut = "confirm"
									datacontext = "[GetScriptedGui('confirm_hotkey')]"
									visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).End )]"
									onclick = "[PdxGuiWidget.AccessParent.AccessParent.TriggerAnimation('first_button')]"
								}

								icon = {
									texture = "gfx/icons/confirm.dds"
									size = { 18 18 }
									parentanchor = center
									alpha = 0.9
									visible = "[Not(EventOption.IsHighlighted)]"
								}

								icon = {
									texture = "gfx/icons/confirm_blue.dds"
									visible = "[EventOption.IsHighlighted]"
									size = { 18 18 }
									parentanchor = center
								}
							}
						}
					}
				}

				widget = {
					name = "spacer_big_3"
					size = { 0 30 }
				}

			}

			margin_widget = {
				size = { 44 280 }
				icon = {
					texture = "gfx/interface/base_parts/background_red.dds"
					parentanchor = right
					position = { -12 42 }
					size = { 40 260 }

					modify_texture = {
						name = "Alpha"
						texture = "gfx/interface/base_parts/header_l_pattern_x0bd_vertical.dds"
						blend_mode = alphamultiply
						spriteType = Corneredtiled
					}

					modify_texture = {
						name = "Alpha2"
						texture = "gfx/interface/base_parts/side_s_x104bd_right_cut_alpha.dds"
						blend_mode = alphamultiply
						spritetype = corneredTiled
						spriteborder = { 60 40 }
					}

				}
			}

		}

		goto_button = {
			name = "goto_button"
			position = { -54 56 }
			parentanchor = right
			shortcut = "go_to_button"
			visible = "[EventWindow.HasLocation]"
			blockoverride "On_click" { onclick = "[EventWindow.GoToLocation]" }
			tooltip = "go_to"
		}
	}
}

base_window = { ####Currently unused
	name = "major_event_window"
	parentanchor = center
	position = { 0 10 }
	minimumsize = { 1170 650 }
	blockoverride "Drop_shadow" { visible = yes }
	blockoverride "DropShadowAlpha" { alpha = 0.3 }
	blockoverride "WindowAlpha" { alpha = 1 }
	state = {
		name = _show
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/2.0/sfx_ui_snapshot_windows"
		}
	}
	vbox = {
		using = MainWindowHeaderBoxCentered

		blockoverride "Title_text" { text = "[EventWindow.GetTitle]" }

		vbox = {
			layoutpolicy_vertical = expanding
		}

	}
	widget = {
		size = { 0 34 }

		state = {
			name = show_hotkey_marker
			trigger_when = "[Player.Exists]"

			on_start = "[PdxGuiWidget.AccessParent.FindChild('hotkey_marker').Show]"
		}
	}
	fixedgridbox = {
		parentanchor = bottom
		position = { 310 -12 }
		name = "option_grid"
		addcolumn = 550
		addrow = 45
		minimumsize = { 0 0 }
		item = {
			container = {
				using = eventbuttonbig

				state = {
					name = first_button
					on_start = "[EventOption.Select]"
				}

				button = {
					name = "hotkey_marker"
					position = { 16 0 }
					size = { 30 30 }
					visible = no
					tooltip = "enter_hotkey"

					gfxtype = togglepushbuttongfx
					shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
					framesize = { 40 40 }
					datacontext = "[GetScriptedGui('confirm_hotkey')]"
					down = "[ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).End )]"

					button = { # this actually triggers the button
						size = { 0 0 }
						shortcut = "confirm"
						datacontext = "[GetScriptedGui('confirm_hotkey')]"
						visible = "[ScriptedGui.IsShown( GuiScope.SetRoot( Player.MakeScope ).End )]"
						onclick = "[PdxGuiWidget.AccessParent.AccessParent.TriggerAnimation('first_button')]"
					}

					icon = {
						texture = "gfx/icons/confirm.dds"
						size = { 18 18 }
						parentanchor = center
						alpha = 0.9
						visible = "[Not(EventOption.IsHighlighted)]"
					}

					icon = {
						texture = "gfx/icons/confirm_blue.dds"
						visible = "[EventOption.IsHighlighted]"
						size = { 18 18 }
						parentanchor = center
					}
				}
			}
		}
	}
	scrollarea = {
		parentanchor = center
		position = { 0 163 }
		name = "description_scrollarea_big"
		size = { 950 350 }
		#maximumsize = { 990 240 }
		scrollbarpolicy_horizontal = always_off

		using = NoninteractableBG
		blockoverride "Margins" {
			margin = { 2 7 }
			margin_bottom = 10
		}
		scrollbar_vertical = {
			using = VerticalScrollBar
		}

		scrollwidget = {
			textbox = {
				#resizeparent = yes
				name = "description_big"
				minimumsize = { 950 0 }
				maximumsize = { 950 -1 }
				multiline = yes
				using = BaseFontM
				using = Black_FontColor
				autoresize = yes
				margin = { 12 3 }
				align = top|left
				text = "[EventWindow.GetDescription]"
			}
		}
	}
	container = {
		resizeparent = yes

		flowcontainer = {
			name = "portraits_left"
			visible = "[EventWindow.HasLeftPortraitCharacter('0')]"
			ignoreinvisible = yes
			direction = vertical
			spacing = 4
			position = { 19 @portraittopspacerbig }
			container = {
				using = event_portrait
				name = "portrait_left"
				parentanchor = hcenter
				datacontext = "[EventWindow.GetLeftPortraitCharacter('0')]"
				visible = "[EventWindow.HasLeftPortraitCharacter('0')]"
			}
			container = {
				using = event_portrait
				name = "portrait_left_small_1"
				parentanchor = hcenter
				datacontext = "[EventWindow.GetLeftPortraitCharacter('1')]"
				visible = "[EventWindow.HasLeftPortraitCharacter('1')]"
			}
			container = {
				using = event_portrait
				name = "portrait_left_small_2"
				parentanchor = hcenter
				datacontext = "[EventWindow.GetLeftPortraitCharacter('2')]"
				visible = "[EventWindow.HasLeftPortraitCharacter('2')]"
			}
			widget = { size = { 1 24 } visible = "[EventWindow.HasLeftPortraitCharacter('2')]" }
		}

		flowcontainer = {
			name = "portraits_right"

			visible = "[EventWindow.HasRightPortraitCharacter('0')]"
			ignoreinvisible = yes
			direction = vertical
			spacing = 4
			parentanchor = right
			position = { -19 @portraittopspacerbig }
			container = {
				using = event_portrait
				name = "portrait_right"
				parentanchor = hcenter
				datacontext = "[EventWindow.GetRightPortraitCharacter('0')]"
				visible = "[EventWindow.HasRightPortraitCharacter('0')]"
				blockoverride "portrait_transformation"
				{
					portrait_scale = { -1 1 }
					portrait_offset = { 1 0 }
				}
			}

			container = {
				using = event_portrait
				name = "portrait_right_small_1"
				parentanchor = hcenter
				datacontext = "[EventWindow.GetRightPortraitCharacter('1')]"
				visible = "[EventWindow.HasRightPortraitCharacter('1')]"
				blockoverride "portrait_transformation"
				{
					portrait_scale = { -1 1 }
					portrait_offset = { 1 0 }
				}
			}

			container = {
				using = event_portrait
				name = "portrait_right_small_2"
				parentanchor = hcenter
				datacontext = "[EventWindow.GetRightPortraitCharacter('2')]"
				visible = "[EventWindow.HasRightPortraitCharacter('2')]"
				blockoverride "portrait_transformation"
				{
					portrait_scale = { -1 1 }
					portrait_offset = { 1 0 }
				}
			}
			widget = { size = { 1 24 } visible = "[EventWindow.HasLeftPortraitCharacter('2')]" }
		}

		flowcontainer = {
			name = "Bottom"
			direction = horizontal
			position = { 0 0 }
			ignoreinvisible = yes

			margin_widget = {
				size = { 44 280 }
				icon = {
					texture = "gfx/interface/base_parts/background_red.dds"
					position = { 12 49 }
					size = { 40 320 }

					modify_texture = {
						name = "Alpha"
						texture = "gfx/interface/base_parts/header_l_pattern_x0bd_vertical.dds"
						blend_mode = alphamultiply
						spriteType = Corneredtiled
					}

					modify_texture = {
						name = "Alpha2"
						texture = "gfx/interface/base_parts/side_s_x104bd_left_cut_alpha.dds"
						blend_mode = alphamultiply
						spritetype = corneredTiled
						spriteborder = { 60 40 }
					}

				}
			}

			flowcontainer = {
				direction = vertical
				ignoreinvisible = yes

				flowcontainer = {
					name = "Center_Box_big"
					direction = vertical
					margin = { 4 0 }
					ignoreinvisible = yes
					minimumsize = { 0 0 }
					visible = "[Or( EventWindow.HasRightPortraitCharacter('0'), EventWindow.HasLeftPortraitCharacter('0') )]"

					widget = { size = { 0 55 } }

					widget = {
						visible = "[Or( EventWindow.HasRightPortraitCharacter('0'), EventWindow.HasLeftPortraitCharacter('0') )]"
						name = "spacing_w_big"
						size = { 660 0 }
					}

					widget = {
						size = { 600 292 }
						parentanchor = hcenter
						icon = {
							name = "event_picture_big"
							size = { 1015 335 }
							texture = "[EventWindow.GetEventPicture]"
							tooltip = "[EventWindow.GetDebugInfo]"
							alpha = 0.8
						}
						icon = {
							name = "event_theme_icon"
							size = { 1015 335 }
							texture = "[EventWindow.GetThemeIcon]"
							tooltip = "[EventWindow.GetDebugInfo]"
							modify_texture = {
								texture = "gfx/interface/base_parts/event_picture_alpha_big.dds"
								blend_mode = alphamultiply
							}
							alpha = 0.8
						}
					}
				}
			}

			margin_widget = {
				size = { 460 280 }
				icon = {
					texture = "gfx/interface/base_parts/background_red.dds"
					parentanchor = right
					position = { -12 49 }
					size = { 40 320 }
					modify_texture = {
						name = "Alpha"
						texture = "gfx/interface/base_parts/header_l_pattern_x0bd_vertical.dds"
						blend_mode = alphamultiply
						spriteType = Corneredtiled
					}

					modify_texture = {
						name = "Alpha2"
						texture = "gfx/interface/base_parts/side_s_x104bd_right_cut_alpha.dds"
						blend_mode = alphamultiply
						spritetype = corneredTiled
						spriteborder = { 60 40 }
					}

				}
			}
		}

		goto_button = {
			name = "goto_button"
			position = { -54 56 }
			parentanchor = right
			shortcut = "go_to_button"
			visible = "[EventWindow.HasLocation]"
			blockoverride "On_click" { onclick = "[EventWindow.GoToLocation]" }
			tooltip = "go_to"
		}
	}
}

base_sub_window = {
	gfxtype = windowgfx
	name = "minor_event_window"
	parentanchor = bottom|hcenter
	movable = yes
	position = { 0 400 }
	size = { 480 340 }

	blockoverride "Title_text" { text = "[EventWindow.GetTitle]" }

	blockoverride "White_buttons"
	{

	}

	goto_button = {
		name = "close_button"
		shortcut = "go_to_button"
		parentanchor = bottom|right
		position = { -12 -12 }
		visible = "[EventWindow.HasLocation]"
		blockoverride "On_click" { onclick = "[EventWindow.GoToLocation]" }
		tooltip = "go_to"
	}

	cpt_button = {
		name = "portrait_left"
		visible = "[EventWindow.HasLeftPortraitCharacter('0')]"
		datacontext = "[EventWindow.GetLeftPortraitCharacter('0')]"
		size = { 100 150 }
		position = { 14 44 }
	}

	textbox = {
		name = "description"
		size = { 350 300 }
		position = { 120 44 }
		multiline = yes
		using = BaseFontS
		using = Black_FontColor
		margin = { 10 0 }
		align = top
		text = "[EventWindow.GetDescription]"
	}

	fixedgridbox = {
		name = "option_grid"
		addcolumn = 340
		addrow = 36
		parentanchor = bottom|hcenter
		position = { 0 -10 }
		item = {
			container = {
				text_button_square = {
					visible = "[Not(EventOption.IsHighlighted)]"
					blockoverride "Center_text" { text = "[EventOption.GetText]" }
					tooltip = "[EventOption.GetTooltip]"
					blockoverride "On_click" { onclick = "[EventOption.Select]" }
					size = { 340 0 }
				}

				# For Highlighted Event Options
				text_button_square_highlighted = {
					visible = "[EventOption.IsHighlighted]"
					blockoverride "Center_text"
					{
						text = "[EventOption.GetText]"
						max_width = 340
					}
					tooltip = "[EventOption.GetTooltip]"
					blockoverride "On_click" { onclick = "[EventOption.Select]" }
					size = { 340 0 }
				}
			}
		}
	}

	state = {
		name = on_appear

		animation = {
			position = { 0 -400 }
		}

		trigger_on_create = yes
		duration = 0.10

	}

}
